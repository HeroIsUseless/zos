     1                                  ORG 0x8000
     2                                  Addr_Main_16 equ 0x8200   ; 实模式下的操作系统入口
     3                                  Addr_Main_32 equ 0x00280000 ; 保护模式下的操作系统入口
     4                                  
     5 00000000 EB36                    jmp main
     6                                  
     7 00000002 <res Eh>                		ALIGNB	16
     8                                  GDTR0: ; 临时GDTR
     9 00000010 1700                    		DW		8*3-1 ; 最后一个字节的偏移
    10 00000012 [20000000]              		DD		GDT0  ; 表的地址
    11                                  
    12 00000016 <res Ah>                		ALIGNB	16
    13                                  GDT0: ; 临时GDT
    14 00000020 00<rep 8h>              		TIMES	8		db 0	             ; 第0段，全是0
    15 00000028 FFFF00000092CF00        		DW		0xffff,0x0000, 0x9200,0x00cf ; 第1段，数据段	
    16 00000030 FFFF0000009AC700        		DW		0xffff,0x0000, 0x9a00,0x00c7 ; 第2段，代码段，它们控制位是不同的，注意从后往前看	
    17                                  
    18                                  main:
    19                                      ; VGA显卡
    20 00000038 B013                        mov al, 0x13
    21 0000003A B400                        mov ah, 0x00
    22 0000003C CD10                        int 0x10
    23                                      ; 禁用中断
    24 0000003E B0FF                        mov al, 0xff
    25 00000040 E621                        out 0x21, al ; 禁止主PIC全部中断
    26 00000042 FA                          cli          ; 禁止中断CPU(内部中断)
    27                                      ; 打开A20GATE,让CPU支持1M以上内存
    28 00000043 B80124                  	mov ax, 0x2401
    29 00000046 CD15                    	int 0x15
    30                                      ; 保护模式切换
    31 00000048 0F0116[1000]            	LGDT	[GDTR0]			; 设置临时GDT
    32 0000004D 0F20C0                  	MOV		EAX,CR0
    33 00000050 6625FFFFFF7F            	AND		EAX,0x7fffffff	; 使用bit31（禁用分页）
    34 00000056 6683C801                	OR		EAX,0x00000001	; bit0到1转换（保护模式过渡）
    35 0000005A 0F22C0                  	MOV		CR0,EAX         ; 设置好CR0寄存器，cr0的第一位就是切换模式的
    36 0000005D EB00                    	JMP		pipelineflush   ; 转换的时候就是这里用了一下jump
    37                                  pipelineflush:
    38 0000005F 66B808000000            	MOV		EAX,1<<3			;  这里用的是第1段
    39 00000065 8ED8                    	MOV		DS,AX
    40 00000067 8EC0                    	MOV		ES,AX
    41 00000069 8EE0                    	MOV		FS,AX
    42 0000006B 8EE8                    	MOV		GS,AX
    43 0000006D 8ED0                    	MOV		SS,AX
    44                                  
    45                                      ; 内存代码拷贝出内存前1MB之外
    46 0000006F 66BE00820000            	MOV		ESI,Addr_Main_16	; 源
    47 00000075 66BF00002800            	MOV		EDI,Addr_Main_32	; 目标
    48 0000007B 66B900000200            	MOV		ECX,512*1024/4 
    49 00000081 E80800                  	CALL	Memory_Copy ; 1024个扇面(512kb)
    50                                  
    51                                      ; 跳转到main执行
    52                                      ;jmp showSuccess
    53 00000084 66EA000028001000            jmp dword 2<<3:0x280000 ; 这里用的是第2段，这样做后，IP为0，基地址为280000，直接到达
    54                                  
    55                                  ; 参数：esi，源地址，edi，目标地址，ecx，数据个数(双字单位，一般普通字节除以4)
    56                                  Memory_Copy:
    57 0000008C 6660                    		pushad
    58                                  	.loop:
    59 0000008E 66678B06                		MOV		EAX,[ESI]
    60 00000092 6683C604                		ADD		ESI,4
    61 00000096 66678907                		MOV		[EDI],EAX
    62 0000009A 6683C704                		ADD		EDI,4
    63 0000009E 6683E901                		SUB		ECX,1
    64 000000A2 75EA                    		JNZ		.loop			; 运算结果不为0跳转到memcpy
    65 000000A4 6661                    		popad
    66 000000A6 C3                      ret
    67                                  
    68                                  showSuccess:
    69 000000A7 BE[BF00]                    mov si, msg
    70                                      putloop:
    71 000000AA 8A04                            mov al, [si] ; 把si中的内容放到al中
    72 000000AC 83C601                          add si, 1
    73 000000AF 3C00                            cmp al, 0
    74 000000B1 7409                            je halt
    75 000000B3 B40E                            mov ah, 0x0e
    76 000000B5 BB0F00                          mov bx, 15
    77 000000B8 CD10                            int 0x10
    78 000000BA EBEE                        jmp putloop
    79                                   
    80                                  halt:
    81 000000BC F4                          hlt 
    82 000000BD EBFD                        jmp halt
    83                                   
    84                                  ; 信息显示部分
    85                                  msg:
    86 000000BF 626F6F742073756363-     db		"boot success"
    86 000000C8 657373             
    87 000000CB 0A                      db		0x0a			; 换行
    88 000000CC 00                      db		0
    89                                  
    90 000000CD 00<rep 133h>            times    512-($-$$) db 0 
