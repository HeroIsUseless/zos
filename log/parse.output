Terminals which are not used

   NUMBER
   ADD
   SUB
   MUL
   DIV
   ABS
   EOL


Grammar

    0 $accept: stmts $end

    1 stmts: /* empty */
    2      | stmt ';' stmts

    3 stmt: def
    4     | exec
    5     | exp
    6     | '(' stmts ')'

    7 def: def_var
    8    | def_fun

    9 def_var: VAR ':' INTEGER

   10 @1: /* empty */

   11 def_fun: VAR params ':' @1 '(' ')'

   12 params: '(' ')'
   13       | '(' params_def ')'
   14       | '(' params_exec ')'

   15 params_def: param_def
   16           | param_def ',' params_def

   17 param_def: VAR ':' INTEGER

   18 params_exec: param_exec
   19            | param_exec ',' params_exec

   20 param_exec: exp

   21 exec: VAR '<' '=' exp
   22     | VAR params

   23 exp: factor
   24    | exp '+' factor
   25    | exp '-' factor

   26 factor: term
   27       | factor '*' term
   28       | factor '/' term

   29 term: INTEGER
   30     | VAR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 11 12 13 14
')' (41) 6 11 12 13 14
'*' (42) 27
'+' (43) 24
',' (44) 16 19
'-' (45) 25
'/' (47) 28
':' (58) 9 11 17
';' (59) 2
'<' (60) 21
'=' (61) 21
error (256)
NUMBER (258)
INTEGER (259) 9 17 29
ADD (260)
SUB (261)
MUL (262)
DIV (263)
ABS (264)
VAR (265) 9 11 17 21 22 30
EOL (266)


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
stmts (24)
    on left: 1 2, on right: 0 2 6
stmt (25)
    on left: 3 4 5 6, on right: 2
def (26)
    on left: 7 8, on right: 3
def_var (27)
    on left: 9, on right: 7
def_fun (28)
    on left: 11, on right: 8
@1 (29)
    on left: 10, on right: 11
params (30)
    on left: 12 13 14, on right: 11 22
params_def (31)
    on left: 15 16, on right: 13 16
param_def (32)
    on left: 17, on right: 15 16
params_exec (33)
    on left: 18 19, on right: 14 19
param_exec (34)
    on left: 20, on right: 18 19
exec (35)
    on left: 21 22, on right: 4
exp (36)
    on left: 23 24 25, on right: 5 20 21 24 25
factor (37)
    on left: 26 27 28, on right: 23 24 25 27 28
term (38)
    on left: 29 30, on right: 26 27 28


state 0

    0 $accept: . stmts $end

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 1 (stmts)

    stmts    go to state 4
    stmt     go to state 5
    def      go to state 6
    def_var  go to state 7
    def_fun  go to state 8
    exec     go to state 9
    exp      go to state 10
    factor   go to state 11
    term     go to state 12


state 1

   29 term: INTEGER .

    $default  reduce using rule 29 (term)


state 2

    9 def_var: VAR . ':' INTEGER
   11 def_fun: VAR . params ':' @1 '(' ')'
   21 exec: VAR . '<' '=' exp
   22     | VAR . params
   30 term: VAR .

    '('  shift, and go to state 13
    ':'  shift, and go to state 14
    '<'  shift, and go to state 15

    $default  reduce using rule 30 (term)

    params  go to state 16


state 3

    6 stmt: '(' . stmts ')'

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 1 (stmts)

    stmts    go to state 17
    stmt     go to state 5
    def      go to state 6
    def_var  go to state 7
    def_fun  go to state 8
    exec     go to state 9
    exp      go to state 10
    factor   go to state 11
    term     go to state 12


state 4

    0 $accept: stmts . $end

    $end  shift, and go to state 18


state 5

    2 stmts: stmt . ';' stmts

    ';'  shift, and go to state 19


state 6

    3 stmt: def .

    $default  reduce using rule 3 (stmt)


state 7

    7 def: def_var .

    $default  reduce using rule 7 (def)


state 8

    8 def: def_fun .

    $default  reduce using rule 8 (def)


state 9

    4 stmt: exec .

    $default  reduce using rule 4 (stmt)


state 10

    5 stmt: exp .
   24 exp: exp . '+' factor
   25    | exp . '-' factor

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21

    $default  reduce using rule 5 (stmt)


state 11

   23 exp: factor .
   27 factor: factor . '*' term
   28       | factor . '/' term

    '*'  shift, and go to state 22
    '/'  shift, and go to state 23

    $default  reduce using rule 23 (exp)


state 12

   26 factor: term .

    $default  reduce using rule 26 (factor)


state 13

   12 params: '(' . ')'
   13       | '(' . params_def ')'
   14       | '(' . params_exec ')'

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 24
    ')'      shift, and go to state 25

    params_def   go to state 26
    param_def    go to state 27
    params_exec  go to state 28
    param_exec   go to state 29
    exp          go to state 30
    factor       go to state 11
    term         go to state 12


state 14

    9 def_var: VAR ':' . INTEGER

    INTEGER  shift, and go to state 31


state 15

   21 exec: VAR '<' . '=' exp

    '='  shift, and go to state 32


state 16

   11 def_fun: VAR params . ':' @1 '(' ')'
   22 exec: VAR params .

    ':'  shift, and go to state 33

    $default  reduce using rule 22 (exec)


state 17

    6 stmt: '(' stmts . ')'

    ')'  shift, and go to state 34


state 18

    0 $accept: stmts $end .

    $default  accept


state 19

    2 stmts: stmt ';' . stmts

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 1 (stmts)

    stmts    go to state 35
    stmt     go to state 5
    def      go to state 6
    def_var  go to state 7
    def_fun  go to state 8
    exec     go to state 9
    exp      go to state 10
    factor   go to state 11
    term     go to state 12


state 20

   24 exp: exp '+' . factor

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    factor  go to state 37
    term    go to state 12


state 21

   25 exp: exp '-' . factor

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    factor  go to state 38
    term    go to state 12


state 22

   27 factor: factor '*' . term

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    term  go to state 39


state 23

   28 factor: factor '/' . term

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    term  go to state 40


state 24

   17 param_def: VAR . ':' INTEGER
   30 term: VAR .

    ':'  shift, and go to state 41

    $default  reduce using rule 30 (term)


state 25

   12 params: '(' ')' .

    $default  reduce using rule 12 (params)


state 26

   13 params: '(' params_def . ')'

    ')'  shift, and go to state 42


state 27

   15 params_def: param_def .
   16           | param_def . ',' params_def

    ','  shift, and go to state 43

    $default  reduce using rule 15 (params_def)


state 28

   14 params: '(' params_exec . ')'

    ')'  shift, and go to state 44


state 29

   18 params_exec: param_exec .
   19            | param_exec . ',' params_exec

    ','  shift, and go to state 45

    $default  reduce using rule 18 (params_exec)


state 30

   20 param_exec: exp .
   24 exp: exp . '+' factor
   25    | exp . '-' factor

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21

    $default  reduce using rule 20 (param_exec)


state 31

    9 def_var: VAR ':' INTEGER .

    $default  reduce using rule 9 (def_var)


state 32

   21 exec: VAR '<' '=' . exp

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    exp     go to state 46
    factor  go to state 11
    term    go to state 12


state 33

   11 def_fun: VAR params ':' . @1 '(' ')'

    $default  reduce using rule 10 (@1)

    @1  go to state 47


state 34

    6 stmt: '(' stmts ')' .

    $default  reduce using rule 6 (stmt)


state 35

    2 stmts: stmt ';' stmts .

    $default  reduce using rule 2 (stmts)


state 36

   30 term: VAR .

    $default  reduce using rule 30 (term)


state 37

   24 exp: exp '+' factor .
   27 factor: factor . '*' term
   28       | factor . '/' term

    '*'  shift, and go to state 22
    '/'  shift, and go to state 23

    $default  reduce using rule 24 (exp)


state 38

   25 exp: exp '-' factor .
   27 factor: factor . '*' term
   28       | factor . '/' term

    '*'  shift, and go to state 22
    '/'  shift, and go to state 23

    $default  reduce using rule 25 (exp)


state 39

   27 factor: factor '*' term .

    $default  reduce using rule 27 (factor)


state 40

   28 factor: factor '/' term .

    $default  reduce using rule 28 (factor)


state 41

   17 param_def: VAR ':' . INTEGER

    INTEGER  shift, and go to state 48


state 42

   13 params: '(' params_def ')' .

    $default  reduce using rule 13 (params)


state 43

   16 params_def: param_def ',' . params_def

    VAR  shift, and go to state 49

    params_def  go to state 50
    param_def   go to state 27


state 44

   14 params: '(' params_exec ')' .

    $default  reduce using rule 14 (params)


state 45

   19 params_exec: param_exec ',' . params_exec

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 36

    params_exec  go to state 51
    param_exec   go to state 29
    exp          go to state 30
    factor       go to state 11
    term         go to state 12


state 46

   21 exec: VAR '<' '=' exp .
   24 exp: exp . '+' factor
   25    | exp . '-' factor

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21

    $default  reduce using rule 21 (exec)


state 47

   11 def_fun: VAR params ':' @1 . '(' ')'

    '('  shift, and go to state 52


state 48

   17 param_def: VAR ':' INTEGER .

    $default  reduce using rule 17 (param_def)


state 49

   17 param_def: VAR . ':' INTEGER

    ':'  shift, and go to state 41


state 50

   16 params_def: param_def ',' params_def .

    $default  reduce using rule 16 (params_def)


state 51

   19 params_exec: param_exec ',' params_exec .

    $default  reduce using rule 19 (params_exec)


state 52

   11 def_fun: VAR params ':' @1 '(' . ')'

    ')'  shift, and go to state 53


state 53

   11 def_fun: VAR params ':' @1 '(' ')' .

    $default  reduce using rule 11 (def_fun)
