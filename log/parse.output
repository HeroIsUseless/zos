Terminals which are not used

   NUMBER
   EOL


Grammar

    0 $accept: stmts $end

    1 stmts: /* empty */
    2      | stmt ';' stmts

    3 stmt: def
    4     | exec
    5     | exp
    6     | '(' stmts ')'

    7 def: def_var
    8    | def_fun

    9 def_var: VAR ':' INTEGER

   10 @1: /* empty */

   11 def_fun: VAR params ':' @1 '(' ')'

   12 params: '(' ')'
   13       | '(' params_def ')'
   14       | '(' params_exec ')'

   15 params_def: param_def
   16           | param_def ',' params_def

   17 param_def: VAR ':' INTEGER

   18 params_exec: param_exec
   19            | param_exec ',' params_exec

   20 param_exec: exp

   21 exec: VAR '<' '=' exp
   22     | VAR params
   23     | if_head ',' stmt ')'
   24     | if_head ')'

   25 @2: /* empty */

   26 if_head: IF '(' exp ',' @2 stmt

   27 exp: factor
   28    | exp '+' factor
   29    | exp '-' factor

   30 factor: term
   31       | factor '*' term
   32       | factor '/' term

   33 term: INTEGER
   34     | VAR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 11 12 13 14 26
')' (41) 6 11 12 13 14 23 24
'*' (42) 31
'+' (43) 28
',' (44) 16 19 23 26
'-' (45) 29
'/' (47) 32
':' (58) 9 11 17
';' (59) 2
'<' (60) 21
'=' (61) 21
error (256)
NUMBER (258)
INTEGER (259) 9 17 33
IF (260) 26
VAR (261) 9 11 17 21 22 34
EOL (262)


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
stmts (20)
    on left: 1 2, on right: 0 2 6
stmt (21)
    on left: 3 4 5 6, on right: 2 23 26
def (22)
    on left: 7 8, on right: 3
def_var (23)
    on left: 9, on right: 7
def_fun (24)
    on left: 11, on right: 8
@1 (25)
    on left: 10, on right: 11
params (26)
    on left: 12 13 14, on right: 11 22
params_def (27)
    on left: 15 16, on right: 13 16
param_def (28)
    on left: 17, on right: 15 16
params_exec (29)
    on left: 18 19, on right: 14 19
param_exec (30)
    on left: 20, on right: 18 19
exec (31)
    on left: 21 22 23 24, on right: 4
if_head (32)
    on left: 26, on right: 23 24
@2 (33)
    on left: 25, on right: 26
exp (34)
    on left: 27 28 29, on right: 5 20 21 26 28 29
factor (35)
    on left: 30 31 32, on right: 27 28 29 31 32
term (36)
    on left: 33 34, on right: 30 31 32


state 0

    0 $accept: . stmts $end

    INTEGER  shift, and go to state 1
    IF       shift, and go to state 2
    VAR      shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 1 (stmts)

    stmts    go to state 5
    stmt     go to state 6
    def      go to state 7
    def_var  go to state 8
    def_fun  go to state 9
    exec     go to state 10
    if_head  go to state 11
    exp      go to state 12
    factor   go to state 13
    term     go to state 14


state 1

   33 term: INTEGER .

    $default  reduce using rule 33 (term)


state 2

   26 if_head: IF . '(' exp ',' @2 stmt

    '('  shift, and go to state 15


state 3

    9 def_var: VAR . ':' INTEGER
   11 def_fun: VAR . params ':' @1 '(' ')'
   21 exec: VAR . '<' '=' exp
   22     | VAR . params
   34 term: VAR .

    '('  shift, and go to state 16
    ':'  shift, and go to state 17
    '<'  shift, and go to state 18

    $default  reduce using rule 34 (term)

    params  go to state 19


state 4

    6 stmt: '(' . stmts ')'

    INTEGER  shift, and go to state 1
    IF       shift, and go to state 2
    VAR      shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 1 (stmts)

    stmts    go to state 20
    stmt     go to state 6
    def      go to state 7
    def_var  go to state 8
    def_fun  go to state 9
    exec     go to state 10
    if_head  go to state 11
    exp      go to state 12
    factor   go to state 13
    term     go to state 14


state 5

    0 $accept: stmts . $end

    $end  shift, and go to state 21


state 6

    2 stmts: stmt . ';' stmts

    ';'  shift, and go to state 22


state 7

    3 stmt: def .

    $default  reduce using rule 3 (stmt)


state 8

    7 def: def_var .

    $default  reduce using rule 7 (def)


state 9

    8 def: def_fun .

    $default  reduce using rule 8 (def)


state 10

    4 stmt: exec .

    $default  reduce using rule 4 (stmt)


state 11

   23 exec: if_head . ',' stmt ')'
   24     | if_head . ')'

    ')'  shift, and go to state 23
    ','  shift, and go to state 24


state 12

    5 stmt: exp .
   28 exp: exp . '+' factor
   29    | exp . '-' factor

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26

    $default  reduce using rule 5 (stmt)


state 13

   27 exp: factor .
   31 factor: factor . '*' term
   32       | factor . '/' term

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 27 (exp)


state 14

   30 factor: term .

    $default  reduce using rule 30 (factor)


state 15

   26 if_head: IF '(' . exp ',' @2 stmt

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    exp     go to state 30
    factor  go to state 13
    term    go to state 14


state 16

   12 params: '(' . ')'
   13       | '(' . params_def ')'
   14       | '(' . params_exec ')'

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 31
    ')'      shift, and go to state 32

    params_def   go to state 33
    param_def    go to state 34
    params_exec  go to state 35
    param_exec   go to state 36
    exp          go to state 37
    factor       go to state 13
    term         go to state 14


state 17

    9 def_var: VAR ':' . INTEGER

    INTEGER  shift, and go to state 38


state 18

   21 exec: VAR '<' . '=' exp

    '='  shift, and go to state 39


state 19

   11 def_fun: VAR params . ':' @1 '(' ')'
   22 exec: VAR params .

    ':'  shift, and go to state 40

    $default  reduce using rule 22 (exec)


state 20

    6 stmt: '(' stmts . ')'

    ')'  shift, and go to state 41


state 21

    0 $accept: stmts $end .

    $default  accept


state 22

    2 stmts: stmt ';' . stmts

    INTEGER  shift, and go to state 1
    IF       shift, and go to state 2
    VAR      shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 1 (stmts)

    stmts    go to state 42
    stmt     go to state 6
    def      go to state 7
    def_var  go to state 8
    def_fun  go to state 9
    exec     go to state 10
    if_head  go to state 11
    exp      go to state 12
    factor   go to state 13
    term     go to state 14


state 23

   24 exec: if_head ')' .

    $default  reduce using rule 24 (exec)


state 24

   23 exec: if_head ',' . stmt ')'

    INTEGER  shift, and go to state 1
    IF       shift, and go to state 2
    VAR      shift, and go to state 3
    '('      shift, and go to state 4

    stmt     go to state 43
    def      go to state 7
    def_var  go to state 8
    def_fun  go to state 9
    exec     go to state 10
    if_head  go to state 11
    exp      go to state 12
    factor   go to state 13
    term     go to state 14


state 25

   28 exp: exp '+' . factor

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    factor  go to state 44
    term    go to state 14


state 26

   29 exp: exp '-' . factor

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    factor  go to state 45
    term    go to state 14


state 27

   31 factor: factor '*' . term

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    term  go to state 46


state 28

   32 factor: factor '/' . term

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    term  go to state 47


state 29

   34 term: VAR .

    $default  reduce using rule 34 (term)


state 30

   26 if_head: IF '(' exp . ',' @2 stmt
   28 exp: exp . '+' factor
   29    | exp . '-' factor

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    ','  shift, and go to state 48


state 31

   17 param_def: VAR . ':' INTEGER
   34 term: VAR .

    ':'  shift, and go to state 49

    $default  reduce using rule 34 (term)


state 32

   12 params: '(' ')' .

    $default  reduce using rule 12 (params)


state 33

   13 params: '(' params_def . ')'

    ')'  shift, and go to state 50


state 34

   15 params_def: param_def .
   16           | param_def . ',' params_def

    ','  shift, and go to state 51

    $default  reduce using rule 15 (params_def)


state 35

   14 params: '(' params_exec . ')'

    ')'  shift, and go to state 52


state 36

   18 params_exec: param_exec .
   19            | param_exec . ',' params_exec

    ','  shift, and go to state 53

    $default  reduce using rule 18 (params_exec)


state 37

   20 param_exec: exp .
   28 exp: exp . '+' factor
   29    | exp . '-' factor

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26

    $default  reduce using rule 20 (param_exec)


state 38

    9 def_var: VAR ':' INTEGER .

    $default  reduce using rule 9 (def_var)


state 39

   21 exec: VAR '<' '=' . exp

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    exp     go to state 54
    factor  go to state 13
    term    go to state 14


state 40

   11 def_fun: VAR params ':' . @1 '(' ')'

    $default  reduce using rule 10 (@1)

    @1  go to state 55


state 41

    6 stmt: '(' stmts ')' .

    $default  reduce using rule 6 (stmt)


state 42

    2 stmts: stmt ';' stmts .

    $default  reduce using rule 2 (stmts)


state 43

   23 exec: if_head ',' stmt . ')'

    ')'  shift, and go to state 56


state 44

   28 exp: exp '+' factor .
   31 factor: factor . '*' term
   32       | factor . '/' term

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 28 (exp)


state 45

   29 exp: exp '-' factor .
   31 factor: factor . '*' term
   32       | factor . '/' term

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 29 (exp)


state 46

   31 factor: factor '*' term .

    $default  reduce using rule 31 (factor)


state 47

   32 factor: factor '/' term .

    $default  reduce using rule 32 (factor)


state 48

   26 if_head: IF '(' exp ',' . @2 stmt

    $default  reduce using rule 25 (@2)

    @2  go to state 57


state 49

   17 param_def: VAR ':' . INTEGER

    INTEGER  shift, and go to state 58


state 50

   13 params: '(' params_def ')' .

    $default  reduce using rule 13 (params)


state 51

   16 params_def: param_def ',' . params_def

    VAR  shift, and go to state 59

    params_def  go to state 60
    param_def   go to state 34


state 52

   14 params: '(' params_exec ')' .

    $default  reduce using rule 14 (params)


state 53

   19 params_exec: param_exec ',' . params_exec

    INTEGER  shift, and go to state 1
    VAR      shift, and go to state 29

    params_exec  go to state 61
    param_exec   go to state 36
    exp          go to state 37
    factor       go to state 13
    term         go to state 14


state 54

   21 exec: VAR '<' '=' exp .
   28 exp: exp . '+' factor
   29    | exp . '-' factor

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26

    $default  reduce using rule 21 (exec)


state 55

   11 def_fun: VAR params ':' @1 . '(' ')'

    '('  shift, and go to state 62


state 56

   23 exec: if_head ',' stmt ')' .

    $default  reduce using rule 23 (exec)


state 57

   26 if_head: IF '(' exp ',' @2 . stmt

    INTEGER  shift, and go to state 1
    IF       shift, and go to state 2
    VAR      shift, and go to state 3
    '('      shift, and go to state 4

    stmt     go to state 63
    def      go to state 7
    def_var  go to state 8
    def_fun  go to state 9
    exec     go to state 10
    if_head  go to state 11
    exp      go to state 12
    factor   go to state 13
    term     go to state 14


state 58

   17 param_def: VAR ':' INTEGER .

    $default  reduce using rule 17 (param_def)


state 59

   17 param_def: VAR . ':' INTEGER

    ':'  shift, and go to state 49


state 60

   16 params_def: param_def ',' params_def .

    $default  reduce using rule 16 (params_def)


state 61

   19 params_exec: param_exec ',' params_exec .

    $default  reduce using rule 19 (params_exec)


state 62

   11 def_fun: VAR params ':' @1 '(' . ')'

    ')'  shift, and go to state 64


state 63

   26 if_head: IF '(' exp ',' @2 stmt .

    $default  reduce using rule 26 (if_head)


state 64

   11 def_fun: VAR params ':' @1 '(' ')' .

    $default  reduce using rule 11 (def_fun)
