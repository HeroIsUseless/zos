     1                                  [bits 32]
     2                                  ORG 0x280000
     3 00000000 B840010000              mov eax, 320
     4 00000005 50                      push eax
     5 00000006 EB04                    jmp main_z@screenWidth$pass
     6 00000008 00000000                main_z@screenWidth: dd 0
     7                                  main_z@screenWidth$pass:
     8 0000000C 58                      pop eax
     9 0000000D A3[08000000]            mov [main_z@screenWidth], eax
    10                                  
    11 00000012 B8C8000000              mov eax, 200
    12 00000017 50                      push eax
    13 00000018 EB04                    jmp main_z@screenHeight$pass
    14 0000001A 00000000                main_z@screenHeight: dd 0
    15                                  main_z@screenHeight$pass:
    16 0000001E 58                      pop eax
    17 0000001F A3[1A000000]            mov [main_z@screenHeight], eax
    18                                  
    19 00000024 B800000A00              mov eax, 0x000a0000
    20 00000029 50                      push eax
    21 0000002A EB04                    jmp main_z@addrVram$pass
    22 0000002C 00000000                main_z@addrVram: dd 0
    23                                  main_z@addrVram$pass:
    24 00000030 58                      pop eax
    25 00000031 A3[2C000000]            mov [main_z@addrVram], eax
    26                                  
    27 00000036 B800E02400              mov eax, 0x0024e000
    28 0000003B 50                      push eax
    29 0000003C EB04                    jmp main_z@addrPM$pass
    30 0000003E 00000000                main_z@addrPM: dd 0
    31                                  main_z@addrPM$pass:
    32 00000042 58                      pop eax
    33 00000043 A3[3E000000]            mov [main_z@addrPM], eax
    34                                  
    35 00000048 B800E02600              mov eax, 0x0026e000
    36 0000004D 50                      push eax
    37 0000004E EB04                    jmp main_z@addrPDT$pass
    38 00000050 00000000                main_z@addrPDT: dd 0
    39                                  main_z@addrPDT$pass:
    40 00000054 58                      pop eax
    41 00000055 A3[50000000]            mov [main_z@addrPDT], eax
    42                                  
    43 0000005A B800F82600              mov eax, 0x0026f800
    44 0000005F 50                      push eax
    45 00000060 EB04                    jmp main_z@addrIDT$pass
    46 00000062 00000000                main_z@addrIDT: dd 0
    47                                  main_z@addrIDT$pass:
    48 00000066 58                      pop eax
    49 00000067 A3[62000000]            mov [main_z@addrIDT], eax
    50                                  
    51 0000006C B800002700              mov eax, 0x00270000
    52 00000071 50                      push eax
    53 00000072 EB04                    jmp main_z@addrGDT$pass
    54 00000074 00000000                main_z@addrGDT: dd 0
    55                                  main_z@addrGDT$pass:
    56 00000078 58                      pop eax
    57 00000079 A3[74000000]            mov [main_z@addrGDT], eax
    58                                  
    59                                  
    60                                  ;############[fun begin]run_once############
    61 0000007E EB03                    jmp main_z@run_once$pass
    62                                  main_z@run_once:
    63 00000080 5D                      pop ebp
    64 00000081 55                      push ebp
    65 00000082 C3                      ret
    66                                  main_z@run_once$pass:
    67                                  ;============[fun end]run_once=============
    68                                  
    69                                  
    70                                  ;############[fun begin]run_loop############
    71 00000083 EB08                    jmp main_z@run_loop$pass
    72                                  main_z@run_loop:
    73 00000085 5D                      pop ebp
    74 00000086 55                      push ebp
    75 00000087 E8E0000000              call kernel_z_halt
    76                                  
    77 0000008C C3                      ret
    78                                  main_z@run_loop$pass:
    79                                  ;============[fun end]run_loop=============
    80                                  
    81                                  
    82                                  
    83                                  ;############[fun begin]set_1byte############
    84 0000008D EB2C                    jmp memory_z@set_1byte$pass
    85                                  memory_z@set_1byte:
    86 0000008F 5D                      pop ebp
    87                                  ;param: addr
    88 00000090 EB04                    jmp memory_z@set_1byte@addr$pass
    89 00000092 00000000                memory_z@set_1byte@addr: dd 0
    90                                  memory_z@set_1byte@addr$pass:
    91 00000096 58                      pop eax
    92 00000097 A3[92000000]            mov [memory_z@set_1byte@addr], eax
    93                                  ;param: val
    94 0000009C EB04                    jmp memory_z@set_1byte@val$pass
    95 0000009E 00000000                memory_z@set_1byte@val: dd 0
    96                                  memory_z@set_1byte@val$pass:
    97 000000A2 58                      pop eax
    98 000000A3 A3[9E000000]            mov [memory_z@set_1byte@val], eax
    99 000000A8 55                      push ebp
   100 000000A9 A1[9E000000]            mov eax, [memory_z@set_1byte@val]
   101 000000AE 50                      push eax
   102 000000AF A1[92000000]            mov eax, [memory_z@set_1byte@addr]
   103 000000B4 50                      push eax
   104 000000B5 E89C000000              call kernel_z_setMem_1byte
   105                                  
   106 000000BA C3                      ret
   107                                  memory_z@set_1byte$pass:
   108                                  ;============[fun end]set_1byte=============
   109                                  
   110                                  
   111                                  ;############[fun begin]set_2byte############
   112 000000BB EB2C                    jmp memory_z@set_2byte$pass
   113                                  memory_z@set_2byte:
   114 000000BD 5D                      pop ebp
   115                                  ;param: addr
   116 000000BE EB04                    jmp memory_z@set_2byte@addr$pass
   117 000000C0 00000000                memory_z@set_2byte@addr: dd 0
   118                                  memory_z@set_2byte@addr$pass:
   119 000000C4 58                      pop eax
   120 000000C5 A3[C0000000]            mov [memory_z@set_2byte@addr], eax
   121                                  ;param: val
   122 000000CA EB04                    jmp memory_z@set_2byte@val$pass
   123 000000CC 00000000                memory_z@set_2byte@val: dd 0
   124                                  memory_z@set_2byte@val$pass:
   125 000000D0 58                      pop eax
   126 000000D1 A3[CC000000]            mov [memory_z@set_2byte@val], eax
   127 000000D6 55                      push ebp
   128 000000D7 A1[CC000000]            mov eax, [memory_z@set_2byte@val]
   129 000000DC 50                      push eax
   130 000000DD A1[C0000000]            mov eax, [memory_z@set_2byte@addr]
   131 000000E2 50                      push eax
   132 000000E3 E875000000              call kernel_z_setMem_2byte
   133                                  
   134 000000E8 C3                      ret
   135                                  memory_z@set_2byte$pass:
   136                                  ;============[fun end]set_2byte=============
   137                                  
   138                                  
   139                                  ;############[fun begin]set_4byte############
   140 000000E9 EB2C                    jmp memory_z@set_4byte$pass
   141                                  memory_z@set_4byte:
   142 000000EB 5D                      pop ebp
   143                                  ;param: addr
   144 000000EC EB04                    jmp memory_z@set_4byte@addr$pass
   145 000000EE 00000000                memory_z@set_4byte@addr: dd 0
   146                                  memory_z@set_4byte@addr$pass:
   147 000000F2 58                      pop eax
   148 000000F3 A3[EE000000]            mov [memory_z@set_4byte@addr], eax
   149                                  ;param: val
   150 000000F8 EB04                    jmp memory_z@set_4byte@val$pass
   151 000000FA 00000000                memory_z@set_4byte@val: dd 0
   152                                  memory_z@set_4byte@val$pass:
   153 000000FE 58                      pop eax
   154 000000FF A3[FA000000]            mov [memory_z@set_4byte@val], eax
   155 00000104 55                      push ebp
   156 00000105 A1[FA000000]            mov eax, [memory_z@set_4byte@val]
   157 0000010A 50                      push eax
   158 0000010B A1[EE000000]            mov eax, [memory_z@set_4byte@addr]
   159 00000110 50                      push eax
   160 00000111 E84F000000              call kernel_z_setMem_4byte
   161                                  
   162 00000116 C3                      ret
   163                                  memory_z@set_4byte$pass:
   164                                  ;============[fun end]set_4byte=============
   165                                  
   166                                  
   167 00000117 EB57                    jmp main
   168                                  
   169                                  limit_low equ 0
   170                                  base_low equ 2 
   171                                  base_mid equ 4 
   172                                  access_right equ 5
   173                                  limit_high equ 6 
   174                                  base_high equ 7 
   175                                  	
   176 00000119 ??????????????          ALIGNB	16
   177                                  GDTR:
   178 00000120 FFFF                    		DW 8*8192-1 ; 最后一个字节的偏移
   179 00000122 00002700                		DD 0x270000 ; 表的地址
   180                                  
   181                                  ; esi是将要填入的地址，就是GDT表的地址，例如Addr_GDT+1*8, Addr_GDT+2*8
   182                                  ; eax是基地址，是代码的
   183                                  ; ebx是控制参数和限制 24+8 4位扩展(自动填上)20位限长8位参数
   184                                  ;     高4位参数 高4位限制 低16位限制 8位参数 = 32位ebx
   185                                  ; 实际上高4位参数被自己固定掉了
   186                                  ; 因此用一个常量代替比较好
   187                                  ; 设置GDT内容
   188                                  ; kernel.z\setGDT(addr: dword, param1: dword, param2: dword)
   189                                  setGDT:
   190 00000126 5D                        pop ebp
   191 00000127 5B                        pop ebx
   192 00000128 58                        pop eax
   193 00000129 5E                        pop esi
   194 0000012A 55                        push ebp
   195 0000012B 66894602                	mov [esi+base_low],  ax ; 基地址的低16位
   196 0000012F C1E810                  	shr eax, 16
   197 00000132 884604                  	mov [esi+base_mid], al ; 8位，1个字节
   198 00000135 886607                  	mov [esi+base_high], ah
   199                                  	; 下面是限制与权限设置
   200 00000138 885E05                  	mov [esi+access_right], bl;8位参数
   201                                  	; 0x00 未使用的记录表
   202                                  	; 0x92 系统模式，可读写不可执行
   203                                  	; 0x9a 系统模式，可执行可读不可写
   204                                  	; 0xf2 应用模式，可读写不可执行
   205                                  	; 0xfa 应用模式，可执行可读不可写
   206 0000013B C1EB08                  	shr ebx, 8
   207 0000013E 66891E                  	mov [esi+limit_low], bx ; 限制的低16位
   208 00000141 C1EB10                  	shr ebx, 16
   209 00000144 80CBC0                  	or  bl, 0xc0 ; 0xc0=11000000
   210 00000147 80E3CF                  	and bl, 0xcf ; 规定好前4位为1100，0x11001111
   211 0000014A 885E06                  	mov [esi+limit_high], bl ; 4位参数+4位段限长，高4位被称为扩展访问权，参数固定为
   212                                  	; G=1(开启4K),D/B=1(32位段),0(固定),AVL=0(也是默认的)这4位在386前是没有的
   213                                  	; 因此注意limit在这里被规定为24位长，其中高四位是扩展访问权，是固定的
   214 0000014D C3                      ret 
   215                                  
   216                                  ; 加载GDT
   217                                  ; kernel.z\loadGDT()
   218                                  loadGDT:
   219 0000014E 0F0115[20010000]          lgdt [GDTR] ; 不加dword会警告，因为现在的标签的确从0开始的
   220 00000155 C3                      ret
   221                                  
   222                                  ; 读写内存
   223                                  ; kernel.z\setMem.1byte(val:dword, addr:dword)
   224                                  kernel_z_setMem_1byte:
   225 00000156 5D                        pop ebp
   226 00000157 5B                        pop ebx
   227 00000158 58                        pop eax
   228 00000159 55                        push ebp
   229 0000015A 8803                      mov [ebx], al
   230 0000015C C3                      ret
   231                                  
   232                                  ; kernel.z\setMem.2byte(val:dword, addr:dword)
   233                                  kernel_z_setMem_2byte:
   234 0000015D 5D                        pop ebp
   235 0000015E 5B                        pop ebx
   236 0000015F 58                        pop eax
   237 00000160 55                        push ebp
   238 00000161 668903                    mov [ebx], ax
   239 00000164 C3                      ret
   240                                  
   241                                  ; kernel.z\setMem.4byte(val:dword, addr:dword)
   242                                  kernel_z_setMem_4byte:
   243 00000165 5D                        pop ebp
   244 00000166 5B                        pop ebx
   245 00000167 58                        pop eax
   246 00000168 55                        push ebp
   247 00000169 8903                      mov [ebx], eax
   248 0000016B C3                      ret
   249                                  
   250                                  ; kernel.z\halt()
   251                                  kernel_z_halt:
   252 0000016C F4                        hlt
   253 0000016D C3                      ret
   254 0000016E 3412                    TESTA: DW 0x1234
   255                                  ; 主进程入口
   256                                  main:
   257 00000170 9BDBE3                    finit
   258 00000173 D905[6E010000]            fld DWORD [TESTA]
   259 00000179 D900                      fld DWORD [eax]
   260 0000017B DCC1                      fadd to st1
   261 0000017D E8FEFEFFFF                call main_z@run_once
   262                                    .loop:
   263 00000182 E8FEFEFFFF                  call main_z@run_loop
   264 00000187 EBF9                      jmp .loop
   265                                  
