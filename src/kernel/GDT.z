[全局描述符表GDT（Global Descriptor Table，段表）在整个系统中，全局描述符表GDT只有一张]
[寄存器GDTR用来存放GDT的入口地址]
[分段管理可以把虚拟地址转换成线性地址，而分页管理可以进一步将线性地址转换成物理地址]
[目前分段不起转换作用了，只起权限作用。虚拟地址==线性地址，每个段保存一个页表，用于向物理地址转换]
[GDT存放的是段描述符。GDT一行8字节，一共8192行，实际上只有前1-4行有用]
[Linux内核运行在特权级0，而用户程序运行在特权级别3]
[根据IA32段保护机制规定，特权级3的程序是无法访问特权级为0的段的]
[所以Linux必须为内核用户程序分别创建其代码段和数据段。]
[这就意味着Linux必须创建4个段描述符——特权级0的代码段和数据段，特权级3的代码段和数据段]
[第一个gdt(也就是第0个，注意第0个不能用，必须全是0)]
[第二个gdt是从0x280000开始，长度是0x7ffff，大概就是512KB，用作代码段]
[在执行初始化GDT前，一直在用在boot区的临时GDT]
[现在都是段基址为0，段界限是4GB，没用页表，只能用内存的前4GB]
[GDTR是一个长度为48bit的寄存器，内容为一个32位的基地址和一个16位的段限]
[其中32位的基址是指GDT在内存中的地址，也就是GDTR0地址0x8220，LGDT是装载命令]
[就这样得到基址了，基址是0，加上偏移地址就成逻辑地址了]
[转到32位后，此时的GDT表的地址仍然是物理地址装入GDTR]
[LDT是二级段表，当下快抛弃段表了，LDT不学了]

main.z: @\main.z;

init():(
	[GDT全部清零]
  i: 0;
  while(i<8192, (
    main.z\Addr_GDT\i*2 <= 0;
    main.z\Addr_GDT\i*2+1 <= 0;
    i<= i+1;
  ));
	[GDT初始化]
	; 第0个数据段全是0
	; 第1个数据段的段地址为0，用作数据段
	mov esi, Addr_GDT+1*8
	mov eax, 0x00000000
	mov ebx, 0x0fffff92 ; 前面4位是控制位，中间20位是限制，后面8位是控制位
	call GDT_Set
	set(Addr_GDT+1*8, 0x00000000, 0x0fffff92);
	; 第2个数据段的段地址为280000，用作代码段
	mov esi, Addr_GDT+2*8
	mov eax, 0x00000000 ; 基地址 
	mov ebx, 0x07ffff9a ; 的确与数据段不同
	call GDT_Set
	set(Addr_GDT+2*8, 0x00000000, 0x07ffff9a);
	lgdt [GDTR] ; 不加dword会警告，因为现在的标签的确从0开始的
	; 这样做后，一切不变，或者说，能够保证从0开始的标签不变
	; 那么怎么转换成从0开始呢？
	; 为什么code是第二段呢？
	; 因为它jmp的就是第二段
	popad
);

set(addr: dword, param1: dword, param2: dword): (

);

; 这8个字节应该 0x00c79a28 0x0000ffff

; esi是将要填入的地址，就是GDT表的地址，例如Addr_GDT+2*8
; eax是基地址，是代码的
; ebx是控制参数和限制 24+8 4位扩展(自动填上)20位限长8位参数
;     高4位参数 高4位限制 低16位限制 8位参数 = 32位ebx
; 实际上高4位参数被自己固定掉了
; 因此用一个常量代替比较好
GDT_Set:
	pushad 
	mov [esi+base_low],  ax ; 基地址的低16位
	shr eax, 16
	mov [esi+base_mid], al ; 8位，1个字节
	mov [esi+base_high], ah
	; 下面是限制与权限设置
	mov [esi+access_right], bl;8位参数
	; 0x00 未使用的记录表
	; 0x92 系统模式，可读写不可执行
	; 0x9a 系统模式，可执行可读不可写
	; 0xf2 应用模式，可读写不可执行
	; 0xfa 应用模式，可执行可读不可写
	shr ebx, 8
	mov [esi+limit_low], bx ; 限制的低16位
	shr ebx, 16
	or  bl, 0xc0 ; 0xc0=11000000
	and bl, 0xcf ; 规定好前4位为1100，0x11001111
	mov [esi+limit_high], bl ; 4位参数+4位段限长，高4位被称为扩展访问权，参数固定为
	; G=1(开启4K),D/B=1(32位段),0(固定),AVL=0(也是默认的)这4位在386前是没有的
	; 因此注意limit在这里被规定为24位长，其中高四位是扩展访问权，是固定的
	popad 
ret 
